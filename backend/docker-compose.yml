version: '3.8'

services:
  # Main application
  memberport-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: memberport-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://memberport:memberport123@postgres:5432/memberport_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - memberport-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: memberport-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=memberport_db
      - POSTGRES_USER=memberport
      - POSTGRES_PASSWORD=memberport123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - memberport-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: memberport-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - memberport-network

  # Optional: Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: memberport-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - memberport-network

  # Optional: pgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: memberport-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@memberport.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - memberport-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Optional: Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: memberport-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - memberport-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # Optional: Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: memberport-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - memberport-network

  # Optional: MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: memberport-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - memberport-network
    volumes:
      - minio_data:/data

networks:
  memberport-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  pgadmin_data:
  minio_data:
